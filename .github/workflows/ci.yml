name: CI

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Free up disk space
        run: |
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
          sudo docker image prune --all --force
          sudo docker builder prune -a
          sudo apt-get clean
          df -h

      - uses: actions/checkout@v4

      - name: Install LuaJIT and pkg-config
        run: sudo apt-get update && sudo apt-get install -y libluajit-5.1-dev pkg-config && sudo apt-get clean

      - uses: moonrepo/setup-rust@v1
        with:
          components: rustfmt, clippy

      - name: Lint (rustfmt)
        run: cargo fmt --all --check

      - name: Clippy
        run: |
          export PKG_CONFIG_PATH=/usr/lib/x86_64-linux-gnu/pkgconfig
          cargo clippy --all-targets --all-features -- -D warnings

  build:
    runs-on: ubuntu-latest
    steps:
      - name: Free up disk space
        run: |
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
          sudo docker image prune --all --force
          sudo docker builder prune -a
          sudo apt-get clean
          df -h

      - uses: actions/checkout@v4

      - name: Install LuaJIT and pkg-config
        run: sudo apt-get update && sudo apt-get install -y libluajit-5.1-dev pkg-config && sudo apt-get clean

      - uses: moonrepo/setup-rust@v1

      - name: Add wasm32-unknown-unknown target
        run: rustup target add wasm32-unknown-unknown

      - uses: Swatinem/rust-cache@v2

      - name: Build all plugins and WASM test modules (Rust, C, WASM)
        run: cargo run -p xtask -- build-all --release

      - name: Build workspace (release)
        run: |
          export PKG_CONFIG_PATH=/usr/lib/x86_64-linux-gnu/pkgconfig
          cargo build --release --workspace

      - name: Validate schemas
        run: cargo run -p schema_validator

  test-rust:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Free up disk space
        run: |
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
          sudo docker image prune --all --force
          sudo docker builder prune -a
          sudo apt-get clean
          df -h

      - uses: actions/checkout@v4

      - uses: moonrepo/setup-rust@v1

      - uses: Swatinem/rust-cache@v2

      - name: Test (with plugins, release)
        run: |
          export PKG_CONFIG_PATH=/usr/lib/x86_64-linux-gnu/pkgconfig
          export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$(pwd)/plugins
          cargo test --release --workspace

      - name: Clean up Rust build artifacts
        run: cargo clean

  test-lua:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Free up disk space
        run: |
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
          sudo docker image prune --all --force
          sudo docker builder prune -a
          sudo apt-get clean
          df -h

      - uses: actions/checkout@v4

      - name: Install LuaJIT and pkg-config
        run: sudo apt-get update && sudo apt-get install -y libluajit-5.1-dev pkg-config && sudo apt-get clean

      - name: Install Lua
        run: sudo apt-get update && sudo apt-get install -y lua5.1 && sudo apt-get clean

      - name: Lua Tests
        run: |
          export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$(pwd)/plugins
          ./run_lua_tests.sh

  test-python:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Free up disk space
        run: |
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
          sudo docker image prune --all --force
          sudo docker builder prune -a
          sudo apt-get clean
          df -h

      - uses: actions/checkout@v4

      - name: Install LuaJIT and pkg-config
        run: sudo apt-get update && sudo apt-get install -y libluajit-5.1-dev pkg-config && sudo apt-get clean

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Create and activate virtualenv, install Python deps
        run: |
          python -m venv .venv
          source .venv/bin/activate
          pip install --upgrade pip
          pip install maturin pytest

      - name: Build and test Python bindings
        run: |
          source .venv/bin/activate
          cd engine_py
          export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$(pwd)/../plugins
          export PKG_CONFIG_PATH=/usr/lib/x86_64-linux-gnu/pkgconfig${PKG_CONFIG_PATH:+:$PKG_CONFIG_PATH}
          maturin develop
          pytest

      - name: Clean up Python venv
        run: rm -rf .venv
